import java.awt.Dimension;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;

import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileFilter;
import javax.swing.JFileChooser;
import uk.co.caprica.vlcj.player.media.Media;


public class MediaSelection extends JPanel implements ActionListener {
	/**
	 * inititalized variables required
	 */
	private static final long serialVersionUID = 1L;
	private JButton mp3, festival;
	protected JFrame frame, errorFrame;
	protected boolean isvideo;
	private JFileChooser chooser;
	private String choosertitle;
	boolean close = false;
	protected String videoFile, musicFile;
	boolean isMSOpen = false;
	protected JLabel lblA;
	protected JFrame psmp3 = new JFrame();
	protected JPanel pscontentPane, errorPane;
	protected String extension;
	/*
	 * This constructor adds buttons an extra pane if it's mp3
	 */
	public MediaSelection(boolean video) {
		isvideo = video;
		if (!video){
			//__________________________________________________________________________ MP3 BUTTON
			mp3 = new JButton("Add mp3");
			//if()
			mp3.addActionListener(this);
			add(mp3);
			//__________________________________________________________________________ FESTIVAL BUTTON
			festival = new JButton("Add Commentary");
			festival.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					CommentaryAdd.getWindows();
					CommentaryAdd.start();
				}});
			add(festival);
			//__________________________________________________________________________ CANCEL BUTTON
			/*JButton btnCancel = new JButton("Cancel");
			add(btnCancel);
			btnCancel.addActionListener(new ActionListener() {

				public void actionPerformed(ActionEvent e) {
					//.setVisible(false); //THIS ISNT WORKING BRAH REKT M8
					//frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
					frame.setVisible(false);
				}});*/

		}
	}

	//__________________________________________________________________________________ MP3 BUTTON FUNCTIONALITY POP UP
	/*
	 * actionPerformed for creating the JFileChooser
	 * changes according to whether the FileChooser is the video or audio
	 * (non-Javadoc)
	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	public void actionPerformed(ActionEvent e) {
		chooser = new JFileChooser(); 
		chooser.setCurrentDirectory(new java.io.File("."));
		chooser.setDialogTitle(choosertitle);
		FileFilter filter;
		if (isvideo){ //---------checking only for avi/ mp4 files or directories
			filter = new FileFilter() {
				public String getDescription() {
					return "AVI videos (*.avi)";
				}
				@Override
				public boolean accept(File f) {
					if (f.isDirectory()) {
						return true;
					} else {
						String filename = f.getName().toLowerCase();
						return filename.endsWith(".avi") || filename.endsWith(".mp4") ;
					}
				}
			};
		} else {//---------------checking only for mp3 files or directories
			filter = new FileFilter() {
				public String getDescription() {
					return "MP3 audio (*.mp3)";
				}
				@Override
				public boolean accept(File f) {
					if (f.isDirectory()) {
						return true;
					} else {
						String filename = f.getName().toLowerCase();
						return filename.endsWith(".mp3");
					}
				}
			};
		}
		chooser.setFileFilter(filter);
		chooser.setAcceptAllFileFilterUsed(false);
		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
			if (isvideo){
				videoFile = chooser.getSelectedFile().getName();
				System.out.println("Video : " + videoFile);
				Mainframe.setVideoSource(videoFile);
				Mainframe.changeVideo();
			} else {
				musicFile = chooser.getSelectedFile().getName();
				System.out.println("Music : " + musicFile);
				Mainframe.setAudioSource(musicFile);
				popupSubmitmp3();
			}
		}
	}
	/*
	 * (non-Javadoc)
	 * @see javax.swing.JComponent#getPreferredSize()
	 */
	public Dimension getPreferredSize(){ return new Dimension(200, 200); }
	/*
	 * This function starts the frame if it is a video
	 */
	//_____________________________________________________________________________________ START FUNCTION TO ACTIVATE THE CLASS
	public void start(boolean video ){
		isMSOpen = true;
		isvideo = video;
		if(!video){
			frame = new JFrame("");
			frame.setBounds(530, 170, 0,0 );
			MediaSelection panel = new MediaSelection(video);
			frame.addWindowListener(
					new WindowAdapter() {
						public void windowClosing(WindowEvent e) {
							frame.setVisible(false);
							isMSOpen = false;
						}});
			frame.getContentPane().add(panel);
			frame.setSize(panel.getPreferredSize());
			frame.setVisible(true);
		}
	}
	//_______________________________________________________________________________________ COMFIRMATION OF MP3 SELECTION
	public void popupSubmitmp3() {
		psmp3 = new JFrame();
		psmp3.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		psmp3.setBounds(450, 170, 360, 180);
		pscontentPane = new JPanel();
		pscontentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		psmp3.setContentPane(pscontentPane);
		pscontentPane.setLayout(null);

		lblA = new JLabel("Do you want to submit this audio to this video?");
		lblA.setBounds(12, 43, 426, 31);
		pscontentPane.add(lblA);

		JButton btnCancel = new JButton("CANCEL");
		btnCancel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				psmp3.setVisible(false);
			}
		});
		btnCancel.setBounds(210, 100, 117, 25);
		pscontentPane.add(btnCancel);

		JButton btnYes = new JButton("YES");
		btnYes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// CODE if video has audio already - ffmpeg -i video.mp4 -an outputNOaudio.mp4
				if ((Mainframe.getAudioSource() != null)){

					String userVideoName = nameFilePopup();//get file name to save video as
					Object[] options = { "OK" };
					boolean acceptableName = true;

					// check name doesn't already exist
					//JOptionPane.showOptionDialog(psmp3, "Name already exists. Enter a unique name", "Error",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
					// check name doesn't contain spaces, symbols, isn't null
					nameWithExtensions(userVideoName);
					File f = new File(userVideoName + extension);//not accouting for extension
					if (!MediaSelection.checkForSpaces(userVideoName)){
						errorMessage("Spaces bro");
						acceptableName = false;
					} else if (f.exists()) {
						errorMessage("existingfile");
						acceptableName = false;
					}
					//JOptionPane.showOptionDialog(psmp3, "Name already exists. Enter a unique name", "Error",JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
					// check extension

					if (acceptableName){
						//delete audio off actual video
						String cmd1 = "ffmpeg -i " + Mainframe.getVideoSource() + " -an .vid.avi";
						ProcessBuilder pb1 = new ProcessBuilder("/bin/bash", "-c", cmd1);
						//redirect error streams
						try {
							Process p1 = pb1.start();
						} catch (IOException e1) {e1.printStackTrace();}
						Mainframe.setVideoSource(".vid.avi");

						String cmd2 = "ffmpeg -i " + Mainframe.getVideoSource() + " -i " + Mainframe.getAudioSource() + " " + userVideoName + extension; //combines the video and audio
						ProcessBuilder pb2 = new ProcessBuilder("/bin/bash", "-c", cmd2);
						//redirect error streams
						try {
							Process p2 = pb2.start();
						} catch (IOException e1) {e1.printStackTrace();}
						//close all windows
						Mainframe.setVideoSource(userVideoName + extension);
						Mainframe.changeVideo();
						psmp3.setVisible(false);

						//SET FRAME TO DIE WHEN THIS DIES TOO _______________________________________________________________________________
					}
				}
			}
		});
		btnYes.setBounds(20, 100, 117, 25);
		pscontentPane.add(btnYes);
		psmp3.setVisible(true);
	}

	public void BringToFront() {
		frame.setVisible(true);
	}

	public String nameFilePopup() {
		String info = JOptionPane.showInputDialog(this, "Save new video File as:");
		return info;
	}

	public String noSymbolsSpacesPopUp() {
		String info = JOptionPane.showInputDialog(this, "File name must contain no symbols/ spaces");
		return info;
	}

	/*
	 * Checks that a video/ audio name that user inputs contains and avi or mp4 extension
	 */
	public void nameWithExtensions(String s){
		if (isvideo){
			extension = ".avi";
			if (s.endsWith(".avi")){
				extension = "";
			} else if (s.endsWith(".mp4")){
				extension = ".mp4";
			}
		} else {
			extension = ".mp3";
			if (s.endsWith(".mp3")){
				extension = "";
			}
		}
		//return s;
	}

	/*
	 * Checks if video/ audio name contains a space character
	 */
	public static boolean checkForSpaces(String s){
		if (s == null| s.contains(" ") | s.contains("\t") | s.contains("l")){
			return false;
		}
		return true;
	}

	/*
	 * Check if filename already exists
	 */
	public static boolean noExistingFiles(String s){
		return true;
	}

	public void errorMessage(String error){//bring to front doe
		errorFrame = new JFrame();
		errorFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		errorFrame.setBounds(500, 170, 200, 170);
		errorPane = new JPanel();
		errorPane.setBorder(new EmptyBorder(0, 0, 5, 5));
		errorFrame.setContentPane(errorPane);
		errorPane.setLayout(null);

		JLabel lblA = new JLabel(error);
		lblA.setBounds(12, 43, 426, 31);
		errorPane.add(lblA);
		errorFrame.setVisible(true);

		JButton btnOK = new JButton("OK");
		btnOK.setBounds(40, 100, 117, 25);
		btnOK.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				nameFilePopup();
				errorFrame.setVisible(false);
			}
		});
		//btnOK.setColor();
		errorFrame.add(btnOK);
	}

}
