import java.awt.BorderLayout;


public class CommentaryAdd extends JFrame {

	/*
	 * declared variables required
	 */
	private JPanel contentPane;
	protected static CommentaryAdd frame;
	private JTextArea txtrA;
	protected String commentary;
	/**
	 * Launch the application.
	 */
	public static void start() {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					frame = new CommentaryAdd();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame w/ buttons & functionality
	 */
	public CommentaryAdd() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 300);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		//__________________________________________________________________________ COMMENTARY TO ADD
		txtrA = new JTextArea();
		txtrA.setBackground(Color.CYAN);
		txtrA.setLineWrap(true);
		txtrA.setText("Add Commentary here");
		txtrA.setBounds(25, 37, 392, 137);
		contentPane.add(txtrA);

		//__________________________________________________________________________ PREVIEW BUTTON
		JButton btnPreview = new JButton("Preview");
		btnPreview.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (txtLengthCheck(txtrA.getText())){
					festivalPreview();
				}
			}
		});
		btnPreview.setBounds(25, 235, 117, 25);
		contentPane.add(btnPreview);

		//__________________________________________________________________________ SAVE TO MP3 BUTTON
		JButton saveToMp3Btn = new JButton("save to mp3");
		saveToMp3Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (txtLengthCheck(txtrA.getText())){
				commentary = "echo "+ "\"" + txtrA.getText() + "\"";
				//ProcessBuilder pb1 = new ProcessBuilder("/bin/bash","-c", commentary + " > filename.txt");
				ProcessBuilder pb = new ProcessBuilder("/bin/bash", "-c","text2wave filename.txt -o MyWav.mp3");
				try {
					//Process p1 = pb1.start();
					Process p = pb.start();
				} catch (IOException e1) {
					e1.printStackTrace();
				}}
				//MediaSelection.popupSubmitmp3();
			}
		});
		saveToMp3Btn.setBounds(148, 235, 139, 25);
		contentPane.add(saveToMp3Btn);

		//__________________________________________________________________________ CANCEL BUTTON
		JButton cancelBtn = new JButton("Cancel");
		cancelBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frame.setVisible(false);
			}
		});
		cancelBtn.setBounds(311, 235, 117, 25);
		contentPane.add(cancelBtn);

		//__________________________________________________________________________ MAX WORDS LABEL
		JLabel lblMaxWords = new JLabel("Max. 100 characters");
		lblMaxWords.setBounds(295, 186, 133, 15);
		contentPane.add(lblMaxWords);
	}

	/*
	 * Checks the length of the input is less 101 characters
	 * This means the text won't be too long that festival will start to struggle to keep up
	 */
	protected boolean txtLengthCheck(String txt){
		if (txt.length() <= 100){
			return true;
		}
		return false;
	}

	/*
	 * Does the festival preview
	 */
	protected void festivalPreview(){
		commentary = "echo \" " + txtrA.getText() + "\" | festival --tts";
		ProcessBuilder pb = new ProcessBuilder("/bin/bash", "-c" , commentary);
		try {
			Process process = pb.start();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}
}
